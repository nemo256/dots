#!/usr/bin/env bash

# Prompt to gather data
function prompt {
    local message=$1
    local variable=$2
    local default=$3
    local silent=$4
    tput setaf 15
    if [ "$silent" == "true" ]; then
      read -s -p "${message} (default: ${default}): " value
    else
      read -p "${message} (default: ${default}): " value
    fi
    tput sgr0
    eval $variable=${value:-$default}
}

# Cool logo message
function logo() {
    local text=$1

    local blue=$(tput setaf 4; tput bold)
    local indigo=$(tput setaf 5; tput bold)
    local text_color=$(tput bold)

    local screen_width=$(tput cols)
    local logo="
███    ██ ██████  ███    ███  ██████      ██████   ██████  ████████ ███████ 
████   ██      ██ ████  ████ ██  ████     ██   ██ ██    ██    ██    ██      
██ ██  ██  █████  ██ ████ ██ ██ ██ ██     ██   ██ ██    ██    ██    ███████ 
██  ██ ██      ██ ██  ██  ██ ████  ██     ██   ██ ██    ██    ██         ██ 
██   ████ ██████  ██      ██  ██████      ██████   ██████     ██    ███████ 
"
    local logo_width=$(echo "$logo" | awk '{ if (length > max) max = length } END { print max }')

    clear

    IFS=$'\n'
    printf "\n"
    for line in $logo
    do
        printf "%*s%s\n" $((($screen_width - ${#line} - 1) / 2)) "" "$indigo$line"
    done

    printf "\n%*s%s%s%*s\n\n" $((($screen_width - ${#text} - 1) / 2)) "" "$blue" "$text" $((($screen_width + ${#text} + ${#text} - $logo_width) / 2)) ""

    tput sgr0
}

logo "Press any key to continue... (Don't forget to edit env vars)"
read

# Information gathering
prompt "Shell" SHELL /bin/bash
prompt "Keymap" KEYMAP us
prompt "Console font" CONSOLE_FONT ter-132b
prompt "IRSSI username" IRSSI_USERNAME "None"
prompt "IRSSI password" IRSSI_PASSWORD "None" true
prompt "Github token (optional)" TOKEN "None"

select WM in "tily (dwm)" "Hyprland"; do
    case $WM in
        "") WM="tily"; break;;
        "tily (dwm)") WM="tily"; break;;
        "Hyprland") WM="Hyprland"; break;;
    esac
done

select AUR_HELPER in "paru-bin" "yay-bin"; do
    case $AUR_HELPER in
        "") AUR_HELPER="paru-bin"; break;;
        "Paru") AUR_HELPER="paru-bin"; break;;
        "Yay") AUR_HELPER="yay-bin"; break;;
    esac
done

if [[ ! -f "packages" ]]; then
  logo "Error: packages file not found!"
  exit 1
fi

logo "Applying custom grub configuration..."
sudo sed -i 's/GRUB_CMDLINE_LINUX_DEFAULT="[^"]*/& rootflags=data=writeback libata.force=1:noncq acpi_osi=!Darwin/' /etc/default/grub 1> /dev/null
sudo sed -i 's/^GRUB_TIMEOUT=5/GRUB_TIMEOUT=0/' /etc/default/grub 1> /dev/null
sudo sed -i 's/^#GRUB_DISABLE_SUBMENU=y/GRUB_DISABLE_SUBMENU=y/' /etc/default/grub 1> /dev/null
sudo grub-mkconfig -o /boot/grub/grub.cfg 1> /dev/null

logo "Sync repos..."
sudo pacman -Syy

while read package
do
  if [[ $package == "" ]] || [[ $package == \#* ]]; then
    continue
  fi
  logo "Installing: $package..."
  sudo pacman -S --noconfirm --needed "$package" 2> /dev/null
done < packages

logo "Installing an AUR helper: ${AUR_HELPER}..."
git clone https://aur.archlinux.org/${AUR_HELPER}.git
cd ${AUR_HELPER}
makepkg -si
cd ..
rm -rf ${AUR_HELPER}

logo "Switch shell to '${SHELL}'..."
sudo chsh -s ${SHELL} root 1> /dev/null
sudo chsh -s ${SHELL} ${USER} 1> /dev/null

logo "Changing default console font..."
echo -ne "KEYMAP=\"$KEYMAP\"\nFONT=\"$CONSOLE_FONT\"\n" | sudo tee /etc/vconsole.conf 1> /dev/null

logo "Adding no password sudo rights..."
sudo sed -ni "/^root/{a\
  ${USER} ALL=(ALL:ALL) NOPASSWD: ALL
p}" /etc/sudoers

logo "Adding yamete kudasai sound on usb mount / unmount..."
echo -ne "KERNEL==\"sd*\", SUBSYSTEM==\"block\", ENV{DEVTYPE}==\"partition\", ACTION==\"add\", ENV{ID_FS_TYPE}!=\"vfat\", ENV{ID_FS_USAGE}==\"filesystem\", RUN+=\"/bin/aplay $HOME/bin/sound/yamete.wav\"\nKERNEL==\"sd*\", SUBSYSTEM==\"block\", ENV{DEVTYPE}==\"partition\", ACTION==\"remove\", ENV{ID_FS_TYPE}!=\"vfat\", ENV{ID_FS_USAGE}==\"filesystem\", RUN+=\"/bin/aplay $HOME/bin/sound/ahh.wav\"\n" | sudo tee /etc/udev/rules.d/99-usb-sound.rules >/dev/null
sudo udevadm control --reload-rules

logo "Automount my usb drive..."
sudo echo -ne "UUID=CA18-653E /mnt vfat noauto,nofail,x-systemd.automount,x-systemd.idle-timeout=2,x-systemd.device-timeout=2" | sudo tee -a /etc/fstab 1> /dev/null
sudo systemctl daemon-reload && sudo systemctl restart local-fs.target

logo "Github configuration..."
if [ -v TOKEN ]; then
  cd ${HOME} 1> /dev/null
  echo -ne "https://nemo256:${TOKEN}@github.com" > ${HOME}/.git-credentials
  git config --global credential.helper store 1> /dev/null
fi

logo "Font configuration..."
cd /usr/share/fonts 1> /dev/null
sudo curl -fLo "Fira Code Bold Nerd Font Complete.ttf" https://github.com/ryanoasis/nerd-fonts/raw/HEAD/patched-fonts/FiraCode/Bold/complete/Fira%20Code%20Bold%20Nerd%20Font%20Complete.ttf 1> /dev/null
sudo fc-cache -fv 1> /dev/null
cd ${HOME} 1> /dev/null

logo "Creating .build folder..."
[[ ! -d .build ]] && mkdir .build 1> /dev/null
cd .build 1> /dev/null
logo "Cloning tily (Custom dwm fork)..."
[[ ! -d tily ]] && git clone https://github.com/nemo256/tily
logo "Cloning st..."
[[ ! -d st ]] && git clone https://github.com/nemo256/st
logo "Cloning dmenu..."
[[ ! -d dmenu ]] && git clone https://github.com/nemo256/dmenu
logo "Cloning slock..."
[[ ! -d slock ]] && git clone https://github.com/nemo256/slock
logo "Cloning slstatus..."
[[ ! -d slstatus ]] && git clone https://github.com/nemo256/slstatus
logo "Cloning fetchy..."
[[ ! -d fetchy ]] && git clone https://github.com/nemo256/fetchy
logo "Cloning ani-cli..."
[[ ! -d ani-cli ]] && git clone https://github.com/pystardust/ani-cli
logo "Cloning tty-clock..."
[[ ! -d tty-clock ]] && git clone https://github.com/xorg62/tty-clock
logo "Cloning grabc..."
[[ ! -d grabc ]] && git clone https://github.com/muquit/grabc
logo "Cloning tremc..."
[[ ! -d tremc ]] && git clone https://github.com/tremc/tremc
logo "Installing tily..."
cd tily && sudo make clean install 1> /dev/null
logo "Installing st..."
cd ../st && sudo make clean install 1> /dev/null
logo "Installing dmenu..."
cd ../dmenu && sudo make clean install 1> /dev/null
logo "Installing slock..."
cd ../slock && sudo make clean install 1> /dev/null
logo "Installing slstatus..."
cd ../slstatus && sudo make clean install 1> /dev/null
logo "Installing fetchy..."
cd ../fetchy && sudo make clean install 1> /dev/null
logo "Installing ani-cli..."
cd ../ani-cli && sudo chmod +x ani-cli && sudo cp -fvr ani-cli /usr/local/bin/ani-cli 1> /dev/null
logo "Installing tty-clock..."
cd ../tty-clock && make && sudo make install 1> /dev/null
logo "Installing grabc..."
cd ../grabc && make && sudo make install 1> /dev/null
logo "Installing tremc..."
cd ../tremc && sudo make install 1> /dev/null
logo "Installing alder..."
yarn global add @aweary/alder 1> /dev/null
logo "Installing weather-cli..."
yarn global add weather-cli 1> /dev/null

logo "Restoring home directory..."
cd ${HOME} && mkdir Videos Work 1> /dev/null

logo "Removing default configuration files..."
rm -fvr ${HOME}/.bash* 1> /dev/null
rm -fvr ${HOME}/.gitconfig 1> /dev/null
rm -fvr ${HOME}/.config/* 1> /dev/null

mv -fv ${HOME}/dots ${HOME}/Work 1> /dev/null

# Get list of programs
programs=$(find "${HOME}/Work/dots/config" -maxdepth 1 -mindepth 1 -type d -printf "%f\n")

logo "Stowing configuration files..."
for program in ${programs}; do
  if [[ ${program} != "irssi" ]]; then
    stow -vd ${HOME}/Work/dots/config/ -t ${HOME} ${program} 1> /dev/null
  fi
done

logo "Irssi configuration..."
cp -fvr ${HOME}/Work/dots/config/irssi ${HOME}
sed -i "s/sasl_username = \".*\"/sasl_username = \"$IRSSI_USERNAME\"/" "${HOME}/.irssi/config"
sed -i "s/sasl_password = \".*\"/sasl_password = \"$IRSSI_PASSWORD\"/" "${HOME}/.irssi/config"

logo "Make binary files executable..."
chmod -R 755 ${HOME}/bin 1> /dev/null

logo "Vimy configuration..."
git clone https://github.com/nemo256/vimy \
  ${HOME}/.config/nvim 1> /dev/null
git clone --depth 1 https://github.com/wbthomason/packer.nvim \
  ${HOME}/.local/share/nvim/site/pack/packer/start/packer.nvim 1> /dev/null
nvim --headless -c 'autocmd User PackerComplete quitall' -c 'PackerSync' 1> /dev/null

logo "Ranger Configuration..."
git clone https://github.com/alexanderjeurissen/ranger_devicons \
  ${HOME}/.config/ranger/plugins/ranger_devicons 1> /dev/null
cd ${HOME}/.config/ranger/plugins/ranger_devicons/ 1> /dev/null
python -m devicons 1> /dev/null
cd ${HOME} 1> /dev/null

logo "Done - Script finished installing and configuring n3m0's dots!"
