#!/usr/bin/env bash

# Env vars
USERNAME=n3m0
SHELL=/bin/bash
# Github token (optional)
TOKEN=

# Cool logo message
function logo() {
    local text=$1

    local blue=$(tput setaf 4; tput bold)
    local indigo=$(tput setaf 5; tput bold)
    local text_color=$(tput bold)

    local screen_width=$(tput cols)
    local logo="
███    ██ ██████  ███    ███  ██████      ██████   ██████  ████████ ███████ 
████   ██      ██ ████  ████ ██  ████     ██   ██ ██    ██    ██    ██      
██ ██  ██  █████  ██ ████ ██ ██ ██ ██     ██   ██ ██    ██    ██    ███████ 
██  ██ ██      ██ ██  ██  ██ ████  ██     ██   ██ ██    ██    ██         ██ 
██   ████ ██████  ██      ██  ██████      ██████   ██████     ██    ███████ 
"
    local logo_width=$(echo "$logo" | awk '{ if (length > max) max = length } END { print max }')

    clear

    IFS=$'\n'
    printf "\n"
    for line in $logo
    do
        printf "%*s%s\n" $((($screen_width - ${#line} - 1) / 2)) "" "$indigo$line"
    done

    printf "\n%*s%s%s%*s\n\n" $((($screen_width - ${#text} - 1) / 2)) "" "$blue" "$text" $((($screen_width + ${#text} + ${#text} - $logo_width) / 2)) ""

    tput sgr0
}

logo "Press any key to continue... (Don't forget to edit env vars)"
read

if [[ ! -f "packages" ]]; then
  logo "Error: packages file not found!"
  exit 1
fi

logo "Applying custom grub configuration..."
sudo sed -i 's/GRUB_CMDLINE_LINUX_DEFAULT="[^"]*/& rootflags=data=writeback libata.force=1:noncq acpi_osi=!Darwin/' /etc/default/grub 1> /dev/null
sudo sed -i 's/^GRUB_TIMEOUT=5/GRUB_TIMEOUT=0/' /etc/default/grub 1> /dev/null
sudo sed -i 's/^#GRUB_DISABLE_SUBMENU=y/GRUB_DISABLE_SUBMENU=y/' /etc/default/grub 1> /dev/null
sudo grub-mkconfig -o /boot/grub/grub.cfg 1> /dev/null

while read package
do
  if [[ $package == "" ]] || [[ $package == \#* ]]; then
    continue
  fi
  logo "Installing: $package..."
  sudo pacman -Sy --noconfirm --needed "$package" 2>/dev/null || sleep 5
done < packages

logo "Switch shell to '${SHELL}'..."
sudo chsh -s ${SHELL} root 1> /dev/null
sudo chsh -s ${SHELL} ${USERNAME} 1> /dev/null

logo "Changing default console font..."
sudo echo -ne 'KEYMAP="us"
FONT="ter-132b"
' > /etc/vconsole.conf

logo "Adding no password sudo rights..."
sudo sed -ni "/^root/{a\
  ${USERNAME} ALL=(ALL:ALL) NOPASSWD: ALL
p}" /etc/sudoers

logo "Github configuration..."
if [ -v TOKEN ]; then
  cd ${HOME} 1> /dev/null
  echo -ne "https://nemo256:${TOKEN}@github.com" > ${HOME}/.git-credentials
  git config --global credential.helper store 1> /dev/null
fi

logo "Font configuration..."
cd /usr/share/fonts 1> /dev/null
sudo curl -fLo "Fira Code Bold Nerd Font Complete.ttf" https://github.com/ryanoasis/nerd-fonts/raw/HEAD/patched-fonts/FiraCode/Bold/complete/Fira%20Code%20Bold%20Nerd%20Font%20Complete.ttf 1> /dev/null
sudo fc-cache -fv 1> /dev/null
cd ${HOME} 1> /dev/null

logo "Cloning Documents..."
[[ ! -d Documents ]] && git clone https://github.com/nemo256/Documents
logo "Cloning Pictures..."
[[ ! -d Pictures ]] && git clone https://github.com/nemo256/Pictures
logo "Cloning Music..."
[[ ! -d Music ]] && git clone https://github.com/nemo256/Music
logo "Cloning Templates..."
[[ ! -d Templates ]] && git clone https://github.com/nemo256/Templates
logo "Creating .build folder..."
[[ ! -d .build ]] && mkdir .build 1> /dev/null
cd .build 1> /dev/null
logo "Cloning tily (Custom dwm fork)..."
[[ ! -d tily ]] && git clone https://github.com/nemo256/tily
logo "Cloning st..."
[[ ! -d st ]] && git clone https://github.com/nemo256/st
logo "Cloning dmenu..."
[[ ! -d dmenu ]] && git clone https://github.com/nemo256/dmenu
logo "Cloning slock..."
[[ ! -d slock ]] && git clone https://github.com/nemo256/slock
logo "Cloning slstatus..."
[[ ! -d slstatus ]] && git clone https://github.com/nemo256/slstatus
logo "Cloning fetchy..."
[[ ! -d fetchy ]] && git clone https://github.com/nemo256/fetchy
logo "Cloning ani-cli..."
[[ ! -d ani-cli ]] && git clone https://github.com/pystardust/ani-cli
logo "Cloning tty-clock..."
[[ ! -d tty-clock ]] && git clone https://github.com/xorg62/tty-clock
logo "Cloning grabc..."
[[ ! -d grabc ]] && git clone https://github.com/muquit/grabc
logo "Cloning tremc..."
[[ ! -d tremc ]] && git clone https://github.com/tremc/tremc
logo "Installing tily..."
cd tily && sudo make clean install 1> /dev/null
logo "Installing st..."
cd ../st && sudo make clean install 1> /dev/null
logo "Installing dmenu..."
cd ../dmenu && sudo make clean install 1> /dev/null
logo "Installing slock..."
cd ../slock && sudo make clean install 1> /dev/null
logo "Installing slstatus..."
cd ../slstatus && sudo make clean install 1> /dev/null
logo "Installing fetchy..."
cd ../fetchy && sudo make clean install 1> /dev/null
logo "Installing ani-cli..."
cd ../ani-cli && sudo chmod +x ani-cli && sudo cp -fvr ani-cli /usr/local/bin/ani-cli 1> /dev/null
logo "Installing tty-clock..."
cd ../tty-clock && make && sudo make install 1> /dev/null
logo "Installing grabc..."
cd ../grabc && make && sudo make install 1> /dev/null
logo "Installing tremc..."
cd ../tremc && sudo make install 1> /dev/null
logo "Installing alder..."
yarn global add @aweary/alder 1> /dev/null
logo "Installing weather-cli..."
yarn global add weather-cli 1> /dev/null

logo "Restoring home directory..."
cd ${HOME} && mkdir Videos Work 1> /dev/null

logo "Stowing configuration files..."
rm -fvr ${HOME}/.bash* 1> /dev/null
rm -fvr ${HOME}/.gitconfig 1> /dev/null
rm -fvr ${HOME}/.config/* 1> /dev/null

cd ${HOME}/dots 1> /dev/null

stow abook 1> /dev/null
stow bin 1> /dev/null
stow bash 1> /dev/null
stow dunst 1> /dev/null
stow git 1> /dev/null
stow gtk-2.0 1> /dev/null
stow gtk-3.0 1> /dev/null
stow htop 1> /dev/null
stow mpv 1> /dev/null
stow ncmpcpp 1> /dev/null
stow newsboat 1> /dev/null
stow nvim 1> /dev/null
stow picom 1> /dev/null
stow ranger 1> /dev/null
stow sxiv 1> /dev/null
stow transmission-daemon 1> /dev/null
stow tremc 1> /dev/null
stow xinit 1> /dev/null
stow zathura 1> /dev/null

chmod -R 755 ${HOME}/bin 1> /dev/null

logo "Vimy configuration..."
git clone https://github.com/nemo256/vimy \
  ${HOME}/.config/nvim 1> /dev/null
git clone --depth 1 https://github.com/wbthomason/packer.nvim \
  ${HOME}/.local/share/nvim/site/pack/packer/start/packer.nvim 1> /dev/null
nvim --headless -c 'autocmd User PackerComplete quitall' -c 'PackerSync' 1> /dev/null

logo "Ranger Configuration..."
git clone https://github.com/alexanderjeurissen/ranger_devicons \
  ${HOME}/.config/ranger/plugins/ranger_devicons 1> /dev/null
cd ${HOME}/.config/ranger/plugins/ranger_devicons/ 1> /dev/null
python -m devicons 1> /dev/null
cd ${HOME} 1> /dev/null

logo "Done - Script finished installing and configuring n3m0's dots!"
